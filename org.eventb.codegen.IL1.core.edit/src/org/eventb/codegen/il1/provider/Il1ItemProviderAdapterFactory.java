/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eventb.codegen.il1.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.eventb.codegen.il1.util.Il1AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Il1ItemProviderAdapterFactory extends Il1AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Il1ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.VariableDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDeclItemProvider variableDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.VariableDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDeclAdapter() {
		if (variableDeclItemProvider == null) {
			variableDeclItemProvider = new VariableDeclItemProvider(this);
		}

		return variableDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.ConstantDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantDeclItemProvider constantDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.ConstantDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantDeclAdapter() {
		if (constantDeclItemProvider == null) {
			constantDeclItemProvider = new ConstantDeclItemProvider(this);
		}

		return constantDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.FormalParamDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormalParamDeclItemProvider formalParamDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.FormalParamDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormalParamDeclAdapter() {
		if (formalParamDeclItemProvider == null) {
			formalParamDeclItemProvider = new FormalParamDeclItemProvider(this);
		}

		return formalParamDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.CallTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallTargetItemProvider callTargetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.CallTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallTargetAdapter() {
		if (callTargetItemProvider == null) {
			callTargetItemProvider = new CallTargetItemProvider(this);
		}

		return callTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Protected} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtectedItemProvider protectedItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Protected}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtectedAdapter() {
		if (protectedItemProvider == null) {
			protectedItemProvider = new ProtectedItemProvider(this);
		}

		return protectedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.MainEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainEntryItemProvider mainEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.MainEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainEntryAdapter() {
		if (mainEntryItemProvider == null) {
			mainEntryItemProvider = new MainEntryItemProvider(this);
		}

		return mainEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Subroutine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubroutineItemProvider subroutineItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Subroutine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubroutineAdapter() {
		if (subroutineItemProvider == null) {
			subroutineItemProvider = new SubroutineItemProvider(this);
		}

		return subroutineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.PreconditionLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreconditionLoopItemProvider preconditionLoopItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.PreconditionLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreconditionLoopAdapter() {
		if (preconditionLoopItemProvider == null) {
			preconditionLoopItemProvider = new PreconditionLoopItemProvider(this);
		}

		return preconditionLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Seq} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SeqItemProvider seqItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Seq}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSeqAdapter() {
		if (seqItemProvider == null) {
			seqItemProvider = new SeqItemProvider(this);
		}

		return seqItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Assignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentItemProvider assignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Assignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Switch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchItemProvider switchItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Switch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchAdapter() {
		if (switchItemProvider == null) {
			switchItemProvider = new SwitchItemProvider(this);
		}

		return switchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Call} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CallItemProvider callItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Call}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCallAdapter() {
		if (callItemProvider == null) {
			callItemProvider = new CallItemProvider(this);
		}

		return callItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.If} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfItemProvider ifItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.If}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfAdapter() {
		if (ifItemProvider == null) {
			ifItemProvider = new IfItemProvider(this);
		}

		return ifItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.ElseIf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElseIfItemProvider elseIfItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.ElseIf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElseIfAdapter() {
		if (elseIfItemProvider == null) {
			elseIfItemProvider = new ElseIfItemProvider(this);
		}

		return elseIfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.SwitchBlock} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwitchBlockItemProvider switchBlockItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.SwitchBlock}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwitchBlockAdapter() {
		if (switchBlockItemProvider == null) {
			switchBlockItemProvider = new SwitchBlockItemProvider(this);
		}

		return switchBlockItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.SimpleTaskType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleTaskTypeItemProvider simpleTaskTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.SimpleTaskType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleTaskTypeAdapter() {
		if (simpleTaskTypeItemProvider == null) {
			simpleTaskTypeItemProvider = new SimpleTaskTypeItemProvider(this);
		}

		return simpleTaskTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.EnvironTask} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironTaskItemProvider environTaskItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.EnvironTask}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironTaskAdapter() {
		if (environTaskItemProvider == null) {
			environTaskItemProvider = new EnvironTaskItemProvider(this);
		}

		return environTaskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.PeriodicTaskType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PeriodicTaskTypeItemProvider periodicTaskTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.PeriodicTaskType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPeriodicTaskTypeAdapter() {
		if (periodicTaskTypeItemProvider == null) {
			periodicTaskTypeItemProvider = new PeriodicTaskTypeItemProvider(this);
		}

		return periodicTaskTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.IL1Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IL1ElementItemProvider il1ElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.IL1Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIL1ElementAdapter() {
		if (il1ElementItemProvider == null) {
			il1ElementItemProvider = new IL1ElementItemProvider(this);
		}

		return il1ElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.FormulaSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormulaSetItemProvider formulaSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.FormulaSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormulaSetAdapter() {
		if (formulaSetItemProvider == null) {
			formulaSetItemProvider = new FormulaSetItemProvider(this);
		}

		return formulaSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.ConditionSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionSetItemProvider conditionSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.ConditionSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionSetAdapter() {
		if (conditionSetItemProvider == null) {
			conditionSetItemProvider = new ConditionSetItemProvider(this);
		}

		return conditionSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.CommandSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandSetItemProvider commandSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.CommandSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandSetAdapter() {
		if (commandSetItemProvider == null) {
			commandSetItemProvider = new CommandSetItemProvider(this);
		}

		return commandSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.LocalRemote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalRemoteItemProvider localRemoteItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.LocalRemote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalRemoteAdapter() {
		if (localRemoteItemProvider == null) {
			localRemoteItemProvider = new LocalRemoteItemProvider(this);
		}

		return localRemoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.InParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InParameterItemProvider inParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.InParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInParameterAdapter() {
		if (inParameterItemProvider == null) {
			inParameterItemProvider = new InParameterItemProvider(this);
		}

		return inParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.OutParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutParameterItemProvider outParameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.OutParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutParameterAdapter() {
		if (outParameterItemProvider == null) {
			outParameterItemProvider = new OutParameterItemProvider(this);
		}

		return outParameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.LocalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalVariableItemProvider localVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.LocalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalVariableAdapter() {
		if (localVariableItemProvider == null) {
			localVariableItemProvider = new LocalVariableItemProvider(this);
		}

		return localVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.PartiallyTranslatedDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartiallyTranslatedDeclItemProvider partiallyTranslatedDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.PartiallyTranslatedDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartiallyTranslatedDeclAdapter() {
		if (partiallyTranslatedDeclItemProvider == null) {
			partiallyTranslatedDeclItemProvider = new PartiallyTranslatedDeclItemProvider(this);
		}

		return partiallyTranslatedDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.FullyTranslatedDecl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FullyTranslatedDeclItemProvider fullyTranslatedDeclItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.FullyTranslatedDecl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFullyTranslatedDeclAdapter() {
		if (fullyTranslatedDeclItemProvider == null) {
			fullyTranslatedDeclItemProvider = new FullyTranslatedDeclItemProvider(this);
		}

		return fullyTranslatedDeclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Enumeration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationItemProvider enumerationItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Enumeration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationAdapter() {
		if (enumerationItemProvider == null) {
			enumerationItemProvider = new EnumerationItemProvider(this);
		}

		return enumerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Case} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseItemProvider caseItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Case}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseAdapter() {
		if (caseItemProvider == null) {
			caseItemProvider = new CaseItemProvider(this);
		}

		return caseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.CaseStatement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseStatementItemProvider caseStatementItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.CaseStatement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseStatementAdapter() {
		if (caseStatementItemProvider == null) {
			caseStatementItemProvider = new CaseStatementItemProvider(this);
		}

		return caseStatementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eventb.codegen.il1.Skip} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SkipItemProvider skipItemProvider;

	/**
	 * This creates an adapter for a {@link org.eventb.codegen.il1.Skip}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSkipAdapter() {
		if (skipItemProvider == null) {
			skipItemProvider = new SkipItemProvider(this);
		}

		return skipItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (variableDeclItemProvider != null) variableDeclItemProvider.dispose();
		if (constantDeclItemProvider != null) constantDeclItemProvider.dispose();
		if (formalParamDeclItemProvider != null) formalParamDeclItemProvider.dispose();
		if (callTargetItemProvider != null) callTargetItemProvider.dispose();
		if (protectedItemProvider != null) protectedItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (programItemProvider != null) programItemProvider.dispose();
		if (mainEntryItemProvider != null) mainEntryItemProvider.dispose();
		if (subroutineItemProvider != null) subroutineItemProvider.dispose();
		if (preconditionLoopItemProvider != null) preconditionLoopItemProvider.dispose();
		if (seqItemProvider != null) seqItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (switchItemProvider != null) switchItemProvider.dispose();
		if (callItemProvider != null) callItemProvider.dispose();
		if (ifItemProvider != null) ifItemProvider.dispose();
		if (elseIfItemProvider != null) elseIfItemProvider.dispose();
		if (switchBlockItemProvider != null) switchBlockItemProvider.dispose();
		if (simpleTaskTypeItemProvider != null) simpleTaskTypeItemProvider.dispose();
		if (environTaskItemProvider != null) environTaskItemProvider.dispose();
		if (periodicTaskTypeItemProvider != null) periodicTaskTypeItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (il1ElementItemProvider != null) il1ElementItemProvider.dispose();
		if (formulaSetItemProvider != null) formulaSetItemProvider.dispose();
		if (conditionSetItemProvider != null) conditionSetItemProvider.dispose();
		if (commandSetItemProvider != null) commandSetItemProvider.dispose();
		if (localRemoteItemProvider != null) localRemoteItemProvider.dispose();
		if (inParameterItemProvider != null) inParameterItemProvider.dispose();
		if (outParameterItemProvider != null) outParameterItemProvider.dispose();
		if (localVariableItemProvider != null) localVariableItemProvider.dispose();
		if (partiallyTranslatedDeclItemProvider != null) partiallyTranslatedDeclItemProvider.dispose();
		if (fullyTranslatedDeclItemProvider != null) fullyTranslatedDeclItemProvider.dispose();
		if (enumerationItemProvider != null) enumerationItemProvider.dispose();
		if (caseItemProvider != null) caseItemProvider.dispose();
		if (caseStatementItemProvider != null) caseStatementItemProvider.dispose();
		if (skipItemProvider != null) skipItemProvider.dispose();
	}

}
